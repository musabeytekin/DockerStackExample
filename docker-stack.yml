version: '3.7'

services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    restart-policy:
      condition: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    deploy:
      replicas: 1
      placement:
        constraints:
          - hostname: mysql
 
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend
    

  wordpress:
    image: wordpress:latest
    ports:
      - 8080:80
    container_name: wordpress
    restart-policy:
      condition: on-failure
    depends_on:
      - mysql
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_MYSQL_USER: test
      WORDPRESS_MYSQL_PASSWORD: test

    deploy:
      replicas: 5
      placement:
        constraints:
          - node.role == worker
        
        parallelism: 2
        delay: 10s

      resources:
        limits:
          cpu_limit: 0.5
          mem_limit: 50M
        reservations:
          cpu_reservation: 0.25
          mem_reservation: 25M

    volumes:
      - /var/www/html

    networks:
      - backend
      - frontend
    

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart-policy:
      condition: on-failure
    depends_on:
      - mysql
    ports:
      - 7080:80
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
    networks:
      - backend
      - frontend



  drupal:
    image: drupal:latest
    container_name: drupal
    restart-policy:
      condition: on-failure
    ports:
      - 9080:80
    depends_on:
      - mysql
    environment:
      MYSQL_DATABASE: test
      MYSQL_USER: test
      MYSQL_PASSWORD: test

    deploy:
      replicas: 5
    volumes:
      - /var/www/private
      - /var/www/html/modules
      - /var/www/html/profiles
      - /var/www/html/themes
      - /var/www/html/sites
    
    networks:
      - backend
      - frontend
      
      
    
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 8081:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      constraints:
        - node.role == manager
    
    networks:
      - backend
      - frontend 


networks:
  backend:
    driver: overlay
  frontend:
    driver: overlay

volumes:
  db_data:

